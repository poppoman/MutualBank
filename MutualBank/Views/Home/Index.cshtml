@{
    ViewData["Title"] = "Home Page";
}
@{
    //初始化Case
    var modelDataString = Newtonsoft.Json.JsonConvert.SerializeObject(@Model);
    var tagDataString = Newtonsoft.Json.JsonConvert.SerializeObject((List<Skill>)ViewBag.Tags);
}

@section Styles{
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/card.css" asp-append-version="true" />
}

    <div class="wrap" id="home">
        <div id="searchLabel">
            <div id="areaLabel">
                @if (@ViewBag.Area != null)
            {
                <span class="searchLabel">@ViewBag.Area<button class="searchLabelClose" id="areaLabelCloseBtn">x</button></span>
            }
        </div>
        <div id="typeLabel"></div>
        <div id="tagLabel"></div>

    </div>
    <div class="home">
        <div class="typeBar">
            <button type="button" class="butn help" name="type" data-bit=true v-on:click="getTypeModel">需要幫忙</button>
            <button type="button" class="butn skill" name="type" data-bit=false v-on:click="getTypeModel">提供技能</button>
        </div>

        <div class="tagBar">
            <div class="tags">
                <span class="tagName" v-for="item in tags" v-on:click="getTagModel" v-bind:data-skillid="item.SkillId">{{item.SkillName}}</span>
            </div>

            <div class="sort">
                <span>排序：</span>
                <select class="sortSelect" id="orderModel" v-on:change="orderModel">
                    <option value="releaseDate">發佈時間</option>
                    <option value="messageCount">留言數</option>
                    <option value="expireDate">期限</option>
                </select>
                <div class="icon" v-on:click="orderAscOrDesc">
                    <i class="fa-solid fa-arrow-down-short-wide"></i>
                </div>

            </div>
        </div>
        <div class="container-fluid">
            <div class="row row-cols-sm-1 row-cols-md-2 row-cols-lg-4">
                <div class="col" v-for="item in caseViewModel">
                    <div class="card  mb-2 w-100">
                        <div class="imgBx">
                            <img src="https://picsum.photos/id/96/400/400" class="card-img-top p-2" alt="圖片">
                        </div>
                        <span>{{item.CaseSkillName}}</span>
                        <div class="card-body">
                            <h5 class="card-title">{{item.CaseTitle}}</h5>
                            <div style="height:50px;"><p class="card-text mt-1">{{item.CaseIntroduction}}</p></div>
                            <div class="d-flex  justify-content-center">
                                <a class="btn" :data-caseid="item.CaseId">留言</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts{

    <script>
        var caseModel = @Html.Raw(modelDataString);
        var tagList = @Html.Raw(tagDataString);
        //Vue
        var vmIndex = new Vue({
            el: "#home",
            data: {
                caseViewModel: caseModel,
                caseResModel: caseModel,
                tags: tagList,
                selectedType: "null",
                selectedTag: -1,
                orderBy: "releaseDate",//預設值為貼文日期
                orderDesc: 1
            },
            methods: {
                //=====
                //Sort
                //建立篩選標籤到畫面(通用)
                addLabel: function(posId, txt, clickEvent) {
                    posId.innerHTML = "";
                    var span = document.createElement("span");
                    span.classList.add("searchLabel");
                    span.innerText = txt;
                    var button = document.createElement("button");
                    button.classList.add("searchLabelClose");
                    button.innerText = "x";
                    span.append(button);
                    posId.append(span);
                    button.addEventListener("click", clickEvent);
                },
                //關閉篩選標籤(通用)
                closeLabel: function(e) {
                    var parentDiv = e.target.parentElement.parentElement;
                    parentDiv.innerHTML = "";
                },
                closeTypeLabel: function(e) {
                    //移除標籤並清除對應data(恢復初始值)
                    vmIndex.closeLabel(e);
                    vmIndex.selectedType = "null";
                    //更新畫面模型

                    if (vmIndex.selectedTag != -1) {
                        vmIndex.caseViewModel = vmIndex.filterTagModel(vmIndex.caseResModel, vmIndex.selectedTag);
                    }
                    else {
                        vmIndex.caseViewModel = vmIndex.caseResModel;
                    }
                },
                closeTagLabel: function(e) {
                    //移除標籤並清除對應data(恢復初始值)
                    vmIndex.closeLabel(e);
                    vmIndex.selectedTag = -1;
                    //更新畫面模型
                    if (typeof (vmIndex.selectedType) == Boolean) {
                        vmIndex.caseViewModel = vmIndex.filterTypeModel(vmIndex.caseResModel, vmIndex.selectedType);
                    }
                    else {
                        vmIndex.caseViewModel = vmIndex.caseResModel;
                    }
                },
                //依需求或技能拿模型(通用)
                filterTypeModel: function(vmModel, b) {
                    return vmModel.filter(x => x.CaseNeedHelp == b);
                },
                //依需求或技能拿模型
                getTypeModel: function(e) {
                    var bitString = e.target.dataset.bit;
                    var bit = bitString == "true" ? true : false;
                    vmIndex.selectedType = bit;
                    vmIndex.addLabel(typeLabel, e.target.innerText, vmIndex.closeTypeLabel);

                    vmIndex.caseViewModel = vmIndex.filterTypeModel(vmIndex.caseResModel, bit);

                    if (vmIndex.selectedTag != -1) {
                        vmIndex.caseViewModel = vmIndex.filterTagModel(vmIndex.caseViewModel, vmIndex.selectedTag);
                    }
                    vmIndex.orderModelForSort();
                },
                //依技能分類拿模型(通用)
                filterTagModel: function(vmModel, n) {
                    return vmModel.filter(x => x.CaseSkillId == n);
                },
                //依技能分類拿模型
                getTagModel: function(e) {
                    var skillid = e.target.dataset.skillid;
                    vmIndex.selectedTag = skillid;
                    vmIndex.addLabel(tagLabel, e.target.innerText, vmIndex.closeTagLabel);

                    vmIndex.caseViewModel = vmIndex.filterTagModel(vmIndex.caseResModel, skillid);

                    if (typeof (vmIndex.selectedType) == Boolean) {
                        vmIndex.caseViewModel = vmIndex.filterTypeModel(vmIndex.caseViewModel, vmIndex.selectedType);
                    }
                    vmIndex.orderModelForSort();
                },
                orderModelForSort: function() {
                    var para = vmIndex.orderBy;
                    var isDesc = vmIndex.orderDesc;
                   
                    switch (para) {
                        case "releaseDate":
                            vmIndex.orderByReleaseDate(isDesc);
                            break;
                        case "messageCount":
                            vmIndex.orderByMessageCount(isDesc);
                            break;
                        case "expireDate":
                            vmIndex.orderByExpireDate(isDesc);
                            dafault:
                            break;
                    }
                },
                //=====
                //Order
                orderModel: function(e) {
                    var para = vmIndex.orderBy = e.target.value;
                    //升序或降序
                    var isDesc = vmIndex.orderDesc;

                    switch (para) {
                        case "releaseDate":
                            vmIndex.orderByReleaseDate(isDesc);
                            break;
                        case "messageCount":
                            vmIndex.orderByMessageCount(isDesc);
                            break;
                        case "expireDate":
                            vmIndex.orderByExpireDate(isDesc);
                            dafault:
                            break;
                    }
                },
                orderAscOrDesc: function() {
                    var isDesc = vmIndex.orderDesc = -vmIndex.orderDesc;
                    //根據Order紀錄值的資料傳回排列陣列
                    var para = vmIndex.orderBy;
                    switch (para) {
                        case "releaseDate":
                            vmIndex.orderByReleaseDate(isDesc);
                            break;
                        case "messageCount":
                            vmIndex.orderByMessageCount(isDesc);
                            break;
                        case "expireDate":
                            vmIndex.orderByExpireDate(isDesc);
                            dafault:
                            break;
                    }
                },
                //排序
                orderByReleaseDate: function(intDesc) {
                    //紀錄降升序狀態
                    intDesc == 1 ? vmIndex.orderDesc = 1 : vmIndex.orderDesc = -1;
                    return vmIndex.caseViewModel.sort(function(a, b) {
                        return b.CaseReleaseDate > a.CaseReleaseDate ? intDesc : -intDesc
                    });
                },
                orderByExpireDate: function(intDesc) {
                    //紀錄降升序狀態
                    intDesc == 1 ? vmIndex.orderDesc = 1 : vmIndex.orderDesc = -1;
                    return vmIndex.caseViewModel.sort(function(a, b) {
                        return b.CaseExpireDate > a.CaseReleaseDate ? intDesc : -intDesc
                    });
                },
                orderByMessageCount: function(intDesc) {
                    if (intDesc == 1) {
                        vmIndex.orderDesc = 1;
                        return vmIndex.caseViewModel.sort(function(a, b) {
                            return b.MessageCount - a.MessageCount
                        });
                    }
                    else {
                        vmIndex.orderDesc = -1;
                        return vmIndex.caseViewModel.sort(function(a, b) {
                            return a.MessageCount - b.MessageCount
                        });
                    }
                }
            },
            mounted: function() {
                //地區標籤綁定關閉標籤事件
                var areaLabelCloseBtn = document.getElementById("areaLabelCloseBtn");
                if (areaLabelCloseBtn != null) {
                    areaLabelCloseBtn.addEventListener("click", function(e) {
                        vmIndex.closeLabel(e);
                        //畫面Model顯示全部資料
                        $.ajax({
                            url: "@Url.Action("GetAllCaseModel","Home")",
                            type: "GET"
                        })
                            .done(function(res) {
                                var nval = JSON.parse(res);
                                vmIndex.caseResModel = vmIndex.caseViewModel = nval;
                                if (typeof (vmIndex.selectedType) == Boolean) {
                                    vmIndex.caseViewModel = vmIndex.filterTypeModel(vmIndex.caseResModel, vmIndex.selectedType);
                                }
                                if (vmIndex.selectedTag != -1) {
                                    vmIndex.caseViewModel = vmIndex.filterTagModel(vmIndex.caseViewModel, vmIndex.selectedTag);
                                }
                            })
                            .fail(function(res) {
                                console.log(res);
                            });

                    });
                }

                //點選order icon時切換圖示
                var iconSort = document.querySelector('.tagBar .sort .icon i');
                    iconSort.addEventListener('click', function() {
                        iconSort.classList.toggle('fa-arrow-down-short-wide');
                        iconSort.classList.toggle('fa-arrow-up-short-wide');
                    });
            }
        });

    </script>

}